package com.org.hackathon {		import flash.display.MovieClip;	import flash.media.Microphone;	import flash.events.ActivityEvent;	import flash.events.StatusEvent;	import flash.media.Camera;	import flash.media.SoundTransform;	import flash.events.SampleDataEvent;	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;	import flash.utils.setTimeout;			public class AudioPlayer extends MovieClip {		private var mic:Microphone;		private var sndChannel:SoundChannel;		private var snd:Sound;		private var sndTransform:SoundTransform;				//xml loader		private var xml:XML;		private var xmlList:XMLList;		private var xmlLoader:URLLoader;				var position:Number		private var mp3List:Array;		private var mp3TitleList:Array;		private var whoIsOn:Number;		private var duration:Number;		private var spinner:Spinner;				public function AudioPlayer() {			toggleSpinner(true);			lblNP.visible = false;						setTimeout(__initialize, 10000);		}				private function __initialize():void {			controls.visible = true;			lblSong.visible = true;			logo.visible = false;			lblAppName.visible = false;			lblNP.visible = true;			position = 0;			mp3List = new Array();			mp3TitleList = new Array();			whoIsOn = 0;			duration = 0;			controls.progressBar.scaleX = 0;			sndChannel = new SoundChannel();			snd = new Sound();						sndTransform = sndChannel.soundTransform;			xmlLoader = new URLLoader();			xmlLoader.addEventListener(Event.COMPLETE, onLoaded);			xmlLoader.load(new URLRequest("list.xml"));			//controls 			//play / pause button			controls.playPause.buttonMode = true;			controls.playPause.gotoAndStop("pause");			controls.playPause.addEventListener(MouseEvent.MOUSE_OVER, playPauseOver);			controls.playPause.addEventListener(MouseEvent.MOUSE_OUT, playPauseOut);			controls.playPause.addEventListener(MouseEvent.MOUSE_DOWN, playPauseDown);						controls.hitBar.addEventListener(MouseEvent.MOUSE_DOWN, hitDown);			controls.hitBar.addEventListener(MouseEvent.MOUSE_UP, hitUp);						controls.nextBtn.addEventListener(MouseEvent.MOUSE_DOWN, nextDown);			controls.prevBtn.addEventListener(MouseEvent.MOUSE_DOWN, prevDown);						var duration:Number = 0;			addEventListener(Event.ENTER_FRAME, soundProgress);															mic = Microphone.getMicrophone(); 			mic.addEventListener(flash.events.SampleDataEvent.SAMPLE_DATA, onSampleData);			          			var micDetails = "Sound input device name: " + mic.name + '\n'; 			micDetails += "Gain: " + mic.gain + '\n'; 			micDetails += "Rate: " + mic.rate + " kHz" + '\n'; 			micDetails += "Muted: " + mic.muted + '\n'; 			micDetails += "Silence level: " + mic.silenceLevel + '\n'; 			micDetails += "Silence timeout: " + mic.silenceTimeout + '\n'; 			micDetails += "Echo suppression: " + mic.useEchoSuppression + '\n'; 			trace(micDetails); 			toggleSpinner(false);		}				private function toggleSpinner(show:Boolean):void {			if(show) {				spinner = addChild(new Spinner(13, 7, 4, 10, 1, 0xFFFFFF)) as Spinner;            	spinner.x = stage.stageWidth/2 - 10;            	spinner.y = stage.stageHeight/2 + 150;            	spinner.spin();			} else {				removeChild(spinner);			}		}						 		private function onMicStatus(event:StatusEvent):void 		{ 			trace(event.code);	    	if (event.code == "Microphone.Unmuted") {     	    	trace("Microphone access was allowed.");     		} else if (event.code == "Microphone.Muted") {          		trace("Microphone access was denied."); 			}    	} 				private	function onSampleData(event:SampleDataEvent):void		{			trace("Mic activityLevel: " + mic.activityLevel);			if(mic.activityLevel > 40)				sndTransform.volume = .2 * mic.activityLevel;			else 				sndTransform.volume = .2;		}				private function playPauseOver(e:MouseEvent):void{			if(controls.playPause.currentFrame == 1) 			{				controls.playPause.gotoAndStop("pauseOver");			} else {				controls.playPause.gotoAndStop("playOver");			}		}			private function playPauseOut(e:MouseEvent):void{			if(controls.playPause.currentFrame == 10) 			{				controls.playPause.gotoAndStop("pause");			} else {				controls.playPause.gotoAndStop("play");			}		}			private function playPauseDown(e:MouseEvent):void{			if(controls.playPause.currentFrame == 10) {				position = sndChannel.position;				controls.playPause.gotoAndStop("playOver");				sndChannel.stop();					} else {				controls.playPause.gotoAndStop("pauseOver");				sndChannel = snd.play(position);			}		}		//xml load complete function		private function onLoaded(e:Event):void		{			xml = new XML(e.target.data);			xmlList = xml.song;			for(var i:uint=0; i<xmlList.length(); i++)			{				mp3List.push(xmlList[i].@url);				mp3TitleList.push(xmlList[i].@title);			}			playMp3();		}		private function playMp3()		{			snd = new Sound();			snd.load(new URLRequest(mp3List[whoIsOn]));			lblSong.htmlText = '<font face="Arial" color="#33333" size="36">'+ mp3TitleList[whoIsOn] +'</font>';			sndChannel = snd.play();			snd.addEventListener(ProgressEvent.PROGRESS, progressHandler);			snd.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			sndChannel.addEventListener(Event.SOUND_COMPLETE, sndComplete);			sndTransform.volume = .2;			sndChannel.soundTransform = sndTransform;			controls.playPause.gotoAndStop("pause");		}		private function progressHandler(e:ProgressEvent):void 		{			//trace(e.bytesLoaded + " : " + e.bytesTotal);		}		private function sndComplete(e:Event)		{			whoIsOn++;			if(whoIsOn >= mp3List.length)			{				whoIsOn = 0;			}			playMp3();		}		private function ioErrorHandler(e:Event):void 		{			whoIsOn++;			if(whoIsOn >= mp3List.length)			{				whoIsOn = 0;			}			playMp3();		}		private function nextDown(e:MouseEvent):void		{			whoIsOn++;			if(whoIsOn >= mp3List.length)			{				whoIsOn = 0 ;			}			sndChannel.stop();			playMp3();		}				private function prevDown(e:MouseEvent):void		{			whoIsOn--;			if(whoIsOn < 0)			{				whoIsOn = mp3List.length-1;			}			sndChannel.stop();			playMp3();		}    		private function soundProgress(event:Event):void 		{    			var loadTime:Number = snd.bytesLoaded / snd.bytesTotal;			var loadPercent:uint = Math.round(100 * loadTime);			var estimatedLength:int = Math.ceil(snd.length / (loadTime));			var playbackPercent:uint = Math.round(100 * (sndChannel.position / estimatedLength));			controls.progressBar.scaleX = playbackPercent/100;			duration = estimatedLength;		}		private function hitDown(e:MouseEvent) {			removeEventListener(Event.ENTER_FRAME, soundProgress);			addEventListener(Event.ENTER_FRAME, soundScrub);			stage.addEventListener(MouseEvent.MOUSE_UP, hitUp);		}		private function hitUp(e:MouseEvent) {			removeEventListener(Event.ENTER_FRAME, soundScrub);			stage.removeEventListener(MouseEvent.MOUSE_UP, hitUp);			addEventListener(Event.ENTER_FRAME, soundProgress);		}		private function soundScrub(e:Event) {			var soundDist:Number = (mouseX - controls.x - controls.hitBar.x) / controls.hitBar.width;			if(soundDist < 0){				soundDist = 0;			}			if(soundDist > 1){				soundDist = 1;			}			sndChannel.stop();			sndChannel = snd.play(Math.floor(duration*soundDist));			controls.progressBar.scaleX = soundDist;		}	}	}